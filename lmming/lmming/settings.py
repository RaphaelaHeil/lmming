"""
Django settings for lmming project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import logging
import os
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Default env values:
env = environ.Env(
    DEBUG=(bool, True),
    POSTGRES_DB=(str, "lmming"),
    POSTGRES_USER=(str, "lmming"),
    POSTGRES_PASSWORD=(str, "12345LM"),
    POSTGRES_HOST=(str, "localhost"),
    POSTGRES_PORT=(str, "5432"),
    REDIS_HOST=(str, "redis://localhost"),
    REDIS_PORT=(str, "6379"),
    LMMING_HOST=(str, "localhost"),
)

environ.Env.read_env(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = [env("LMMING_HOST")]  # "127.0.0.1", "0.0.0.0", "localhost"]

# Application definition

INSTALLED_APPS = [
    'metadata.apps.MetadataConfig',
    'ark.apps.ArkConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_bootstrap5',
    'fontawesomefree'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lmming.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lmming.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env("POSTGRES_DB"),
        'USER': env("POSTGRES_USER"),
        'PASSWORD': env("POSTGRES_PASSWORD"),
        'HOST': env("POSTGRES_HOST"),
        'PORT': env("POSTGRES_PORT")
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'CET'

USE_I18N = False  # TODO: revisit this decision ...

USE_TZ = True

DATA_UPLOAD_MAX_NUMBER_FILES = 800
DATA_UPLOAD_MAX_MEMORY_SIZE = 200 * 1024 * 1024 # 200MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = None

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/django_static/"
STATIC_ROOT = BASE_DIR / "django_static"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REDIS_HOST = env("REDIS_HOST")
REDIS_PORT = env("REDIS_PORT")

CELERY_BROKER_URL = f"{REDIS_HOST}:{REDIS_PORT}"  # os.environ.get("REDIS", "redis://localhost:6379")
CELERY_RESULT_BACKEND = f"{REDIS_HOST}:{REDIS_PORT}"  # os.environ.get("REDIS", "redis://localhost:6379")

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / Path(env("MEDIA_PATH"))  # BASE_DIR / "media"

NER_BASE_DIR = MEDIA_ROOT / "ner_data"

ARCHIVE_INST = env("ARCHIVE_INST", str).upper()
if ARCHIVE_INST == "FAC":
    MINTER_URL = env("MINTER_URL", str)
    MINTER_AUTH = env("MINTER_AUTH", str)
    MINTER_ORG_ID = env("MINTER_ORG_ID", str)
elif ARCHIVE_INST == "ARAB":
    ARAB_RETRIES = env("ARAB_RETRIES", int, 3)
    ARAB_HANDLE_ADDRESS = env("ARAB_HANDLE_ADDRESS", str)
    ARAB_HANDLE_PORT = env("ARAB_HANDLE_PORT", int)
    ARAB_HANDLE_ADMIN = env("ARAB_HANDLE_ADMIN", str)
    ARAB_HANDLE_PREFIX = env("ARAB_HANDLE_PREFIX", str)
    ARAB_PRIVATE_KEY_FILE = env("ARAB_PRIVATE_KEY_FILE", str)
    ARAB_CERT_FILE = env("ARAB_CERT_FILE", str)
else:
    raise ValueError("Unknown Archival Institution")

IIIF_BASE_URL = env("IIIF_BASE_URL", str)

ER_ARCHIVE_ID = env("ER_ARCHIVE_ID", str)
ER_ORGANISATION_NAME = env("ER_ORGANISATION_NAME", str)
ER_COUNTY = env("ER_COUNTY", str, "Distrikt l√§n")
ER_MUNICIPALITY = env("ER_MUNICIPALITY", str, "Kommun")
ER_CITY = env("ER_CITY", str, "Ort")
ER_PARISH = env("ER_PARISH", str, "Socken")

ER_RELATION_LINK = env("ER_RELATION_LINK", str, "UNSET")
ER_CATALOGUE_LINK = env("ER_CATALOGUE_LINK", str, "UNSET")  # legacy name, corresponds to "relation" metadata field
if ER_CATALOGUE_LINK != "UNSET":
    logging.getLogger("django.server").warning(
        "Environment variable 'ER_CATALOGUE_LINK' has been deprecated, please use 'ER_RELATION_LINK' instead")
    if ER_RELATION_LINK == "UNSET":
        ER_RELATION_LINK = ER_CATALOGUE_LINK

if ER_RELATION_LINK == "UNSET":
    ER_RELATION_LINK = "NAD_LINK"

ER_IS_VERSION_OF_LINK = env("ER_IS_VERSION_OF_LINK", str, "ATOM_LINK")

if ARCHIVE_INST == "ARAB":
    ER_COVERAGE = env("ER_COVERAGE", str)
else:
    ER_COVERAGE = env("ER_COVERAGE", str, "level")

HF_CRINA_HASH = env("HF_CRINA_HASH", str, "88870df625e5abfb36c2ecfe2273b6f1a328f43b")
HF_KB_HASH = env("HF_KB_HASH", str, "8e1e0bdcacc4dc230d2199de47b61ce9cac321c7")

SERVER_LOG_NAME = "lmming"
WORKER_LOG_NAME = "lmming_celery"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            'format': '[%(asctime)s] %(levelname)s - {%(message)s}'
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose"
        },
        "worker": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": MEDIA_ROOT / "worker_log.txt",
            'maxBytes': 10 * 1024 * 1024,
            "formatter": "verbose"
        },
        "server": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": MEDIA_ROOT / "server_log.txt",
            'maxBytes': 10 * 1024 * 1024,
            "formatter": "verbose"
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
    "loggers": {
        SERVER_LOG_NAME: {
            "handlers": ["console", "server"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        WORKER_LOG_NAME: {
            "handlers": ["console", "worker"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
    },
}
